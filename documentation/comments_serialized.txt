
======= flattened_marketPlace.sol:ERC20 =======
Developer Documentation
{
  "details" : "Implementation of the `IERC20` interface. * This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using `_mint`. For a generic mechanism see `ERC20Mintable`. * *For a detailed writeup see our guide [How to implement supply mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).* * We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. * Additionally, an `Approval` event is emitted on calls to `transferFrom`. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. * Finally, the non-standard `decreaseAllowance` and `increaseAllowance` functions have been added to mitigate the well-known issues around setting allowances. See `IERC20.approve`.",
  "methods" : 
  {
    "allowance(address,address)" : 
    {
      "details" : "See `IERC20.allowance`."
    },
    "approve(address,uint256)" : 
    {
      "details" : "See `IERC20.approve`.     * Requirements:     * - `spender` cannot be the zero address."
    },
    "balanceOf(address)" : 
    {
      "details" : "See `IERC20.balanceOf`."
    },
    "decreaseAllowance(address,uint256)" : 
    {
      "details" : "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
    },
    "increaseAllowance(address,uint256)" : 
    {
      "details" : "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to `approve` that can be used as a mitigation for problems described in `IERC20.approve`.     * Emits an `Approval` event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
    },
    "totalSupply()" : 
    {
      "details" : "See `IERC20.totalSupply`."
    },
    "transfer(address,uint256)" : 
    {
      "details" : "See `IERC20.transfer`.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
    },
    "transferFrom(address,address,uint256)" : 
    {
      "details" : "See `IERC20.transferFrom`.     * Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`;     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
    }
  }
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:IERC20 =======
Developer Documentation
{
  "details" : "Interface of the ERC20 standard as defined in the EIP. Does not include the optional functions; to access them see `ERC20Detailed`.",
  "methods" : 
  {
    "allowance(address,address)" : 
    {
      "details" : "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom`. This is zero by default.     * This value changes when `approve` or `transferFrom` are called."
    },
    "approve(address,uint256)" : 
    {
      "details" : "Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an `Approval` event."
    },
    "balanceOf(address)" : 
    {
      "details" : "Returns the amount of tokens owned by `account`."
    },
    "totalSupply()" : 
    {
      "details" : "Returns the amount of tokens in existence."
    },
    "transfer(address,uint256)" : 
    {
      "details" : "Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
    },
    "transferFrom(address,address,uint256)" : 
    {
      "details" : "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a `Transfer` event."
    }
  }
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:MarketPlace =======
Developer Documentation
{
  "author" : "Mehmet Dogan",
  "details" : "This contract allows to create and manage a public market place on Ethereum Network. Two design patterns are implemented into the contract as Pausable and Ownable. Ownable allows to contract owner to add new admins. Pausable allows to stop contract state updates due to any emergency. SafeMath allows us to handle overflows/underflows on arithmetic operations.",
  "methods" : 
  {
    "addAdmin(address)" : 
    {
      "details" : "Only contract owner can add new admins to the system.",
      "params" : 
      {
        "newAdmin" : "Address of the user that will be joined the system as Admin."
      }
    },
    "addProduct(uint256,bytes32,uint256,address,uint256)" : 
    {
      "details" : "Adds new product to the store",
      "params" : 
      {
        "_ipfsHash" : "IPFS hash of the data that stores metadata about the product.",
        "_stock" : "Quantity of the product",
        "_storeID" : "Identifier for the store.",
        "price" : "Price in terms of unit denoted by paymentAddress",
        "tokenAddress" : "payment method that can be ERC20 token address or ZERO_ADDRESS for ethereum"
      }
    },
    "addStoreOwner(address)" : 
    {
      "details" : "Only admin can add new store owners to the system.",
      "params" : 
      {
        "_storeOwner" : "Address of the user that will be joined the system as Store Owner."
      }
    },
    "changeProductPrice(uint256,address,uint256)" : 
    {
      "details" : "Modifies the product's price",
      "params" : 
      {
        "_productID" : "Identifier for the product.",
        "price" : "Price in terms of unit denoted by paymentAddress",
        "tokenAddress" : "payment method that can be ERC20 token address or ZERO_ADDRESS for ethereum"
      }
    },
    "constructor" : 
    {
      "details" : "Constructor for the marketplace"
    },
    "createStore(bytes32)" : 
    {
      "details" : "Adds new store to the marketplace.",
      "params" : 
      {
        "storeInfo" : "IPFS hash of the data that stores metadata about the store."
      }
    },
    "editStoreInfo(uint256,bytes32)" : 
    {
      "details" : "Edits the metadata of the store.",
      "params" : 
      {
        "storeId" : "Identifier for the store.",
        "storeInfo" : "IPFS hash of the data that stores metadata about the store."
      }
    },
    "getBalanceOfStore(uint256,address)" : 
    {
      "details" : "Returns the products in the store",
      "params" : 
      {
        "storeId" : "Identifier for the store",
        "tokenAddress" : "payment method that can be ERC20 token address or ZERO_ADDRESS for ethereum"
      },
      "return" : "Array of product IDs"
    },
    "getProductsInStore(uint256)" : 
    {
      "details" : "Returns the products in the store",
      "params" : 
      {
        "storeId" : "Identifier for the store"
      },
      "return" : "Array of product IDs"
    },
    "getStoresOfOwner(address)" : 
    {
      "details" : "Returns the stores of owner",
      "params" : 
      {
        "storeOwner" : "Address of the store owner"
      },
      "return" : "Array of store IDs"
    },
    "isOwner()" : 
    {
      "details" : "Returns true if the caller is the current owner."
    },
    "killContract()" : 
    {
      "details" : "Destructs the contract and transfer funds to the owner"
    },
    "owner()" : 
    {
      "details" : "Returns the address of the current owner."
    },
    "pause()" : 
    {
      "details" : "Called by a pauser to pause, triggers stopped state."
    },
    "paused()" : 
    {
      "details" : "Returns true if the contract is paused, and false otherwise."
    },
    "purchaseProduct(uint256,address,uint256,uint256)" : 
    {
      "details" : "Shoppers purchase the product with desired quantity",
      "params" : 
      {
        "paidAmount" : "Price in terms of unit denoted by paymentAddress",
        "productID" : "Identifier for the product.",
        "quantity" : "amount of the products that will be purchased",
        "tokenAddress" : "payment method that can be ERC20 token address or ZERO_ADDRESS for ethereum"
      }
    },
    "removeProduct(uint256)" : 
    {
      "details" : "Removes the product from store",
      "params" : 
      {
        "productID" : "Identifier for the product."
      }
    },
    "renounceOwnership()" : 
    {
      "details" : "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "transferOwnership(address)" : 
    {
      "details" : "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    },
    "unpause()" : 
    {
      "details" : "Called by a pauser to unpause, returns to normal state."
    },
    "withdrawBalance(uint256,address)" : 
    {
      "details" : "Transfers the funds in the store to the owner",
      "params" : 
      {
        "storeId" : "Identifier for the store",
        "tokenAddress" : "payment method that can be ERC20 token address or ZERO_ADDRESS for ethereum"
      }
    }
  },
  "title" : "MarketPlace"
}
User Documentation
{
  "methods" : 
  {
    "constructor" : "Deployer is set as admin to the marketplaceDeployer is also set as pauser and owner",
    "createStore(bytes32)" : 
    {
      "notice" : "raises LogNewStore event when completed"
    },
    "killContract()" : 
    {
      "notice" : "Only Contract Owner can execute"
    }
  }
}

======= flattened_marketPlace.sol:Ownable =======
Developer Documentation
{
  "details" : "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be aplied to your functions to restrict their use to the owner.",
  "methods" : 
  {
    "constructor" : 
    {
      "details" : "Initializes the contract setting the deployer as the initial owner."
    },
    "isOwner()" : 
    {
      "details" : "Returns true if the caller is the current owner."
    },
    "owner()" : 
    {
      "details" : "Returns the address of the current owner."
    },
    "renounceOwnership()" : 
    {
      "details" : "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "transferOwnership(address)" : 
    {
      "details" : "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  }
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:Pausable =======
Developer Documentation
{
  "details" : "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. * This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
  "methods" : 
  {
    "constructor" : 
    {
      "details" : "Initializes the contract in unpaused state. Assigns the Pauser role to the deployer."
    },
    "pause()" : 
    {
      "details" : "Called by a pauser to pause, triggers stopped state."
    },
    "paused()" : 
    {
      "details" : "Returns true if the contract is paused, and false otherwise."
    },
    "unpause()" : 
    {
      "details" : "Called by a pauser to unpause, returns to normal state."
    }
  }
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:PauserRole =======
Developer Documentation
{
  "methods" : {}
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:Roles =======
Developer Documentation
{
  "details" : "Library for managing addresses assigned to a Role.",
  "methods" : {},
  "title" : "Roles"
}
User Documentation
{
  "methods" : {}
}

======= flattened_marketPlace.sol:SafeMath =======
Developer Documentation
{
  "details" : "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
  "methods" : {}
}
User Documentation
{
  "methods" : {}
}
